{"version":3,"sources":["components/Navbar.js","components/SearchBox.js","components/Table.js","pages/Main.js","pages/ReactTable.js","pages/MaterialUi.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","to","window","location","pathname","SearchBox","props","onSubmit","e","preventDefault","value","results","onChange","handleInputChange","name","list","type","placeholder","id","Table","onClick","handleSortNumber","handleSortString","Employees","map","key","eid","Employee_Name","Class_Title","Number","Wages","Benefits","Compensation","Main","useState","searchTerm","setSearchTerm","filteredEmployees","filter","target","toLowerCase","includes","toString","n","table","rows","switching","i","x","y","shouldSwitch","dir","switchcount","document","getElementById","length","getElementsByTagName","innerHTML","parentNode","insertBefore","Styles","styled","div","EditableCell","initialValue","index","row","column","updateMyData","editable","React","setValue","useEffect","onBlur","DefaultColumnFilter","filterValue","preFilteredRows","setFilter","count","undefined","SliderColumnFilter","useMemo","min","values","max","forEach","Math","parseInt","NumberRangeColumnFilter","style","display","val","old","width","marginRight","marginLeft","fuzzyTextFilterFn","matchSorter","keys","columns","data","skipReset","filterTypes","fuzzyText","text","rowValue","String","startsWith","defaultColumn","Filter","Cell","useTable","autoResetPage","autoResetSelectedRows","disableMultiSort","useFilters","useGroupBy","useSortBy","useExpanded","usePagination","useRowSelect","getTableProps","getTableBodyProps","headerGroups","prepareRow","page","canPreviousPage","canNextPage","pageOptions","pageCount","gotoPage","nextPage","previousPage","setPageSize","state","pageIndex","pageSize","sortBy","groupBy","expanded","filters","selectedRowIds","headerGroup","getHeaderGroupProps","headers","getHeaderProps","getSortByToggleProps","render","isSorted","isSortedDesc","canFilter","getRowProps","cells","cell","getCellProps","isGrouped","getToggleRowExpandedProps","isExpanded","subRows","isAggregated","isPlaceholder","disabled","defaultValue","JSON","stringify","filterGreaterThan","roundedMedian","leafValues","round","ReactTable","Header","accessor","aggregate","Aggregated","setData","originalData","skipResetRef","useRef","current","rowIndex","columnId","autoRemove","descendingComparator","a","b","orderBy","headCells","numeric","disablePadding","label","EnhancedTableHead","classes","order","onRequestSort","numSelected","rowCount","TableHead","TableRow","headCell","TableCell","align","padding","sortDirection","TableSortLabel","active","direction","property","event","visuallyHidden","makeStyles","theme","root","paddingLeft","spacing","paddingRight","highlight","palette","color","secondary","main","backgroundColor","lighten","light","primary","dark","title","flex","useStyles","paper","marginBottom","minWidth","border","clip","height","margin","overflow","position","top","EnhancedTable","setOrder","setOrderBy","selected","setSelected","setPage","dense","setDense","rowsPerPage","setRowsPerPage","emptyRows","Paper","TableContainer","aria-labelledby","size","aria-label","onSelectAllClick","checked","newSelecteds","TableBody","array","comparator","stabilizedThis","el","sort","stableSort","getComparator","slice","isItemSelected","indexOf","labelId","hover","role","aria-checked","tabIndex","component","scope","colSpan","TablePagination","rowsPerPageOptions","onChangePage","newPage","onChangeRowsPerPage","FormControlLabel","control","Switch","App","exact","path","MaterialUi","Boolean","hostname","match","ReactDOM","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e92ded2c.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default function Navbar() {\r\n    return (\r\n  <nav className=\"nav-extended blue-grey\">\r\n  <br/>\r\n    <div className=\"nav-wrapper center-align\">\r\n      <h3 className=\"center-align\">Utah Governor's Office</h3>\r\n      <h5 className=\"center-align\">Employee Compensation Chart</h5>\r\n    </div>\r\n    <br/>\r\n    <div className=\"nav-content\">\r\n      <ul className=\"tabs tabs-transparent\">\r\n        <li className=\"tab\"><Link to=\"/react\" className={\r\n                window.location.pathname === \"/\" || window.location.pathname === \"/react\"\r\n                  ? \"nav-link active\"\r\n                  : \"nav-link\"\r\n              }>\r\n          React\r\n        </Link></li>\r\n        <li className=\"tab\"><Link to=\"/react-table\" className={\r\n                window.location.pathname === \"/react-table\"\r\n                  ? \"nav-link active\"\r\n                  : \"nav-link\"\r\n              }>\r\n          React-Table\r\n        </Link></li>\r\n        <li className=\"tab\"><Link to=\"/material-ui\" className={\r\n                window.location.pathname === \"/material-ui\"\r\n                  ? \"nav-link active\"\r\n                  : \"nav-link\"\r\n              }>\r\n          Material UI\r\n        </Link></li>\r\n      </ul>\r\n    </div>\r\n  </nav>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function SearchBox(props) {\r\n\r\n// prevent default on <form>\r\nconst prevent = e => {\r\n    e.preventDefault();\r\n}\r\n\r\n    return (\r\n        <form className=\"search\" onSubmit={prevent}>\r\n        <div className=\"input-field\">\r\n          <input\r\n            value={props.results}\r\n            onChange={props.handleInputChange}\r\n            name=\"term\"\r\n            list=\"term\"\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            placeholder=\"filter by ID, Name, or Title\"\r\n            id=\"term\"\r\n          />\r\n        </div>\r\n      </form>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Table(props) {\r\n    return (\r\n        <div className=\"card\">\r\n        <table id=\"EmployeeTable\" className=\"highlight blue-grey lighten-4\">\r\n          <thead>\r\n            <tr>\r\n              {/* clickable table columns to sort by ascending or descending order */}\r\n              <th onClick={() => props.handleSortNumber(0)}>\r\n                EID{\" \"}\r\n              </th>\r\n              <th onClick={() => props.handleSortString(1)}>\r\n                Name{\" \"}\r\n              </th>\r\n              <th onClick={() => props.handleSortString(2)}>\r\n                Title{\" \"}\r\n              </th>\r\n              <th onClick={() => props.handleSortNumber(3)}>\r\n                Wages{\" \"}\r\n              </th>\r\n              <th onClick={() => props.handleSortNumber(4)}>\r\n                Benefits{\" \"}\r\n              </th>\r\n              <th onClick={() => props.handleSortNumber(5)}>\r\n                Compensation{\" \"}\r\n              </th>\r\n            </tr>\r\n          </thead>\r\n          {/* loop through Employees and map to table */}\r\n          {props.Employees.map((e) => (\r\n            <tbody key={e.eid}>\r\n              <tr>\r\n                <td>{e.eid}</td>\r\n                <td>{e.Employee_Name}</td>\r\n                <td>{e.Class_Title}</td>\r\n                <td>{Number(e.Wages)}</td>\r\n                <td>{Number(e.Benefits)}</td>\r\n                <td>{Number(e.Compensation)}</td>\r\n              </tr>\r\n            </tbody>\r\n          ))}\r\n        </table>\r\n      </div>\r\n    )\r\n}\r\n","import React, { useState } from \"react\";\r\nimport Employees from \"../utils/Employee.json\";\r\nimport SearchBox from \"../components/SearchBox\";\r\nimport Table from \"../components/Table\";\r\n\r\nexport default function Main() {\r\n    //Set up initial State(s) with Hooks\r\n    const [searchTerm, setSearchTerm] = useState(\"\");\r\n    //  setSearch(\"Cox\");\r\n\r\n    //Create a filter function to sort through relevant data fields\r\n    //Filter method from https://scotch.io/tutorials/quick-and-simple-search-filter-using-vanilla-javascript\r\n    const filteredEmployees = Employees.filter((target) => {\r\n    return (\r\n    target[\"Employee_Name\"].toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n    target[\"eid\"].toString().includes(searchTerm.toString()) ||\r\n    target[\"Class_Title\"].toLowerCase().includes(searchTerm.toLowerCase())\r\n    );\r\n    });\r\n    //   console.log(filteredEmployees);\r\n\r\n    // function to set the value of an eventHandler target to the searchTerm state\r\n    const handleInputChange = e => {\r\n        setSearchTerm(e.target.value);\r\n    };\r\n\r\n    \r\n\r\n    // sort columns button function\r\n    //shamelessly lifted from https://www.w3schools.com/howto/howto_js_sort_table.asp\r\n    const handleSortField = (n) => {\r\n            var table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;\r\n            table = document.getElementById(\"EmployeeTable\");\r\n            switching = true;\r\n            // Set the sorting direction to ascending:\r\n            dir = \"asc\";\r\n            /* Make a loop that will continue until\r\n            no switching has been done: */\r\n            while (switching) {\r\n              // Start by saying: no switching is done:\r\n              switching = false;\r\n              rows = table.rows;\r\n              /* Loop through all table rows (except the\r\n              first, which contains table headers): */\r\n              for (i = 1; i < (rows.length - 1); i++) {\r\n                // Start by saying there should be no switching:\r\n                shouldSwitch = false;\r\n                /* Get the two elements you want to compare,\r\n                one from current row and one from the next: */\r\n                x = rows[i].getElementsByTagName(\"td\")[n];\r\n                y = rows[i + 1].getElementsByTagName(\"td\")[n];\r\n                /* Check if the two rows should switch place,\r\n                based on the direction, asc or desc: */\r\n                if (dir === \"asc\") {\r\n                  if (x.innerHTML.toLowerCase() > y.innerHTML.toLowerCase()) {\r\n                    // If so, mark as a switch and break the loop:\r\n                    shouldSwitch = true;\r\n                    break;\r\n                  }\r\n                } else if (dir === \"desc\") {\r\n                  if (x.innerHTML.toLowerCase() < y.innerHTML.toLowerCase()) {\r\n                    // If so, mark as a switch and break the loop:\r\n                    shouldSwitch = true;\r\n                    break;\r\n                  }\r\n                }\r\n              }\r\n              if (shouldSwitch) {\r\n                /* If a switch has been marked, make the switch\r\n                and mark that a switch has been done: */\r\n                rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);\r\n                switching = true;\r\n                // Each time a switch is done, increase this count by 1:\r\n                switchcount ++;\r\n              } else {\r\n                /* If no switching has been done AND the direction is \"asc\",\r\n                set the direction to \"desc\" and run the while loop again. */\r\n                if (switchcount === 0 && dir === \"asc\") {\r\n                  dir = \"desc\";\r\n                  switching = true;\r\n                }\r\n              }\r\n            }\r\n          }\r\n\r\n          const handleSortNum = (n) => {\r\n            var table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;\r\n            table = document.getElementById(\"EmployeeTable\");\r\n            switching = true;\r\n            // Set the sorting direction to ascending:\r\n            dir = \"asc\";\r\n            /* Make a loop that will continue until\r\n            no switching has been done: */\r\n            while (switching) {\r\n              // Start by saying: no switching is done:\r\n              switching = false;\r\n              rows = table.rows;\r\n              /* Loop through all table rows (except the\r\n              first, which contains table headers): */\r\n              for (i = 1; i < (rows.length - 1); i++) {\r\n                // Start by saying there should be no switching:\r\n                shouldSwitch = false;\r\n                /* Get the two elements you want to compare,\r\n                one from current row and one from the next: */\r\n                x = rows[i].getElementsByTagName(\"td\")[n];\r\n                y = rows[i + 1].getElementsByTagName(\"td\")[n];\r\n                /* Check if the two rows should switch place,\r\n                based on the direction, asc or desc: */\r\n                if (dir === \"asc\") {\r\n                  if (Number(x.innerHTML) > Number(y.innerHTML)) {\r\n                    shouldSwitch = true;\r\n                    break;\r\n                  }\r\n                } else if (dir === \"desc\") {\r\n                  if (Number(x.innerHTML) < Number(y.innerHTML)) {\r\n                    shouldSwitch = true;\r\n                    break;\r\n                  }\r\n                }\r\n              }\r\n              if (shouldSwitch) {\r\n                /* If a switch has been marked, make the switch\r\n                and mark that a switch has been done: */\r\n                rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);\r\n                switching = true;\r\n                // Each time a switch is done, increase this count by 1:\r\n                switchcount ++;\r\n              } else {\r\n                /* If no switching has been done AND the direction is \"asc\",\r\n                set the direction to \"desc\" and run the while loop again. */\r\n                if (switchcount === 0 && dir === \"asc\") {\r\n                  dir = \"desc\";\r\n                  switching = true;\r\n                }\r\n              }\r\n            }\r\n          }\r\n\r\n    return (\r\n      <div>\r\n        <SearchBox handleInputChange={handleInputChange} results={searchTerm} />\r\n        <Table Employees={filteredEmployees}\r\n        handleSortString={handleSortField} handleSortNumber={handleSortNum}/> \r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport {\r\n  useTable,\r\n  usePagination,\r\n  useSortBy,\r\n  useFilters,\r\n  useGroupBy,\r\n  useExpanded,\r\n  useRowSelect,\r\n} from 'react-table'\r\nimport matchSorter from 'match-sorter'\r\nimport Employees from \"../utils/Employee.json\"\r\n\r\n\r\nconst Styles = styled.div`\r\n  padding: 1rem;\r\n\r\n  table {\r\n    border-spacing: 0;\r\n    border: 1px solid black;\r\n\r\n    tr {\r\n      :last-child {\r\n        td {\r\n          border-bottom: 0;\r\n        }\r\n      }\r\n    }\r\n\r\n    th,\r\n    td {\r\n      margin: 0;\r\n      padding: 0.5rem;\r\n      border-bottom: 1px solid black;\r\n      border-right: 1px solid black;\r\n\r\n      :last-child {\r\n        border-right: 0;\r\n      }\r\n    }\r\n\r\n    td {\r\n      input {\r\n        font-size: 1rem;\r\n        padding: 0;\r\n        margin: 0;\r\n        border: 0;\r\n      }\r\n    }\r\n  }\r\n\r\n  .pagination {\r\n    padding: 0.5rem;\r\n  }\r\n`\r\n\r\n// Create an editable cell renderer\r\nconst EditableCell = ({\r\n  value: initialValue,\r\n  row: { index },\r\n  column: { id },\r\n  updateMyData, // This is a custom function that we supplied to our table instance\r\n  editable,\r\n}) => {\r\n  // We need to keep and update the state of the cell normally\r\n  const [value, setValue] = React.useState(initialValue)\r\n\r\n  const onChange = e => {\r\n    setValue(e.target.value)\r\n  }\r\n\r\n  // We'll only update the external data when the input is blurred\r\n  const onBlur = () => {\r\n    updateMyData(index, id, value)\r\n  }\r\n\r\n  // If the initialValue is changed externall, sync it up with our state\r\n  React.useEffect(() => {\r\n    setValue(initialValue)\r\n  }, [initialValue])\r\n\r\n  if (!editable) {\r\n    return `${initialValue}`\r\n  }\r\n\r\n  return <input value={value} onChange={onChange} onBlur={onBlur} />\r\n}\r\n\r\n// Define a default UI for filtering\r\nfunction DefaultColumnFilter({\r\n  column: { filterValue, preFilteredRows, setFilter },\r\n}) {\r\n  const count = preFilteredRows.length\r\n\r\n  return (\r\n    <input\r\n      value={filterValue || ''}\r\n      onChange={e => {\r\n        setFilter(undefined) // Set undefined to remove the filter entirely\r\n      }}\r\n      placeholder={`Search ${count} records...`}\r\n    />\r\n  )\r\n}\r\n\r\n// This is a custom filter UI for selecting\r\n// a unique option from a list\r\n// function SelectColumnFilter({\r\n//   column: { filterValue, setFilter, preFilteredRows, id },\r\n// }) {\r\n//   // Calculate the options for filtering\r\n//   // using the preFilteredRows\r\n//   const options = React.useMemo(() => {\r\n//     const options = new Set()\r\n//     preFilteredRows.forEach(row => {\r\n//       options.add(row.values[id])\r\n//     })\r\n//     return [...options.values()]\r\n//   }, [id, preFilteredRows])\r\n\r\n//   // Render a multi-select box\r\n//   return (\r\n//     <select\r\n//       value={filterValue}\r\n//       onChange={e => {\r\n//         setFilter(e.target.value || undefined)\r\n//       }}\r\n//     >\r\n//       <option value=\"\">All</option>\r\n//       {options.map((option, i) => (\r\n//         <option key={i} value={option}>\r\n//           {option}\r\n//         </option>\r\n//       ))}\r\n//     </select>\r\n//   )\r\n// }\r\n\r\n// This is a custom filter UI that uses a\r\n// slider to set the filter value between a column's\r\n// min and max values\r\nfunction SliderColumnFilter({\r\n  column: { filterValue, setFilter, preFilteredRows, id },\r\n}) {\r\n  // Calculate the min and max\r\n  // using the preFilteredRows\r\n\r\n  const [min, max] = React.useMemo(() => {\r\n    let min = preFilteredRows.length ? preFilteredRows[0].values[id] : 0\r\n    let max = preFilteredRows.length ? preFilteredRows[0].values[id] : 0\r\n    preFilteredRows.forEach(row => {\r\n      min = Math.min(row.values[id], min)\r\n      max = Math.max(row.values[id], max)\r\n    })\r\n    return [min, max]\r\n  }, [id, preFilteredRows])\r\n\r\n  return (\r\n    <>\r\n      <input\r\n        type=\"range\"\r\n        min={min}\r\n        max={max}\r\n        value={filterValue || min}\r\n        onChange={e => {\r\n          setFilter(parseInt(e.target.value, 10))\r\n        }}\r\n      />\r\n      <button onClick={() => setFilter(undefined)}>Off</button>\r\n    </>\r\n  )\r\n}\r\n\r\n// This is a custom UI for our 'between' or number range\r\n// filter. It uses two number boxes and filters rows to\r\n// ones that have values between the two\r\nfunction NumberRangeColumnFilter({\r\n  column: { filterValue = [], preFilteredRows, setFilter, id },\r\n}) {\r\n  const [min, max] = React.useMemo(() => {\r\n    let min = preFilteredRows.length ? preFilteredRows[0].values[id] : 0\r\n    let max = preFilteredRows.length ? preFilteredRows[0].values[id] : 0\r\n    preFilteredRows.forEach(row => {\r\n      min = Math.min(row.values[id], min)\r\n      max = Math.max(row.values[id], max)\r\n    })\r\n    return [min, max]\r\n  }, [id, preFilteredRows])\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        display: 'flex',\r\n      }}\r\n    >\r\n      <input\r\n        value={filterValue[0] || ''}\r\n        type=\"number\"\r\n        onChange={e => {\r\n          const val = e.target.value\r\n          setFilter((old = []) => [val ? parseInt(val, 10) : undefined, old[1]])\r\n        }}\r\n        placeholder={`Min (${min})`}\r\n        style={{\r\n          width: '70px',\r\n          marginRight: '0.5rem',\r\n        }}\r\n      />\r\n      to\r\n      <input\r\n        value={filterValue[1] || ''}\r\n        type=\"number\"\r\n        onChange={e => {\r\n          const val = e.target.value\r\n          setFilter((old = []) => [old[0], val ? parseInt(val, 10) : undefined])\r\n        }}\r\n        placeholder={`Max (${max})`}\r\n        style={{\r\n          width: '70px',\r\n          marginLeft: '0.5rem',\r\n        }}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction fuzzyTextFilterFn(rows, id, filterValue) {\r\n  return matchSorter(rows, filterValue, { keys: [row => row.values[id]] })\r\n}\r\n\r\n// Let the table remove the filter if the string is empty\r\nfuzzyTextFilterFn.autoRemove = val => !val\r\n\r\n// Be sure to pass our updateMyData and the skipReset option\r\nfunction Table({ columns, data, updateMyData, skipReset }) {\r\n  const filterTypes = React.useMemo(\r\n    () => ({\r\n      // Add a new fuzzyTextFilterFn filter type.\r\n      fuzzyText: fuzzyTextFilterFn,\r\n      // Or, override the default text filter to use\r\n      // \"startWith\"\r\n      text: (rows, id, filterValue) => {\r\n        return rows.filter(row => {\r\n          const rowValue = row.values[id]\r\n          return rowValue !== undefined\r\n            ? String(rowValue)\r\n                .toLowerCase()\r\n                .startsWith(String(filterValue).toLowerCase())\r\n            : true\r\n        })\r\n      },\r\n    }),\r\n    []\r\n  )\r\n\r\n  const defaultColumn = React.useMemo(\r\n    () => ({\r\n      // Let's set up our default Filter UI\r\n      Filter: DefaultColumnFilter,\r\n      // And also our default editable cell\r\n      Cell: EditableCell,\r\n    }),\r\n    []\r\n  )\r\n\r\n  // Use the state and functions returned from useTable to build your UI\r\n  const {\r\n    getTableProps,\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    prepareRow,\r\n    page, // Instead of using 'rows', we'll use page,\r\n    // which has only the rows for the active page\r\n\r\n    // The rest of these things are super handy, too ;)\r\n    canPreviousPage,\r\n    canNextPage,\r\n    pageOptions,\r\n    pageCount,\r\n    gotoPage,\r\n    nextPage,\r\n    previousPage,\r\n    setPageSize,\r\n    state: {\r\n      pageIndex,\r\n      pageSize,\r\n      sortBy,\r\n      groupBy,\r\n      expanded,\r\n      filters,\r\n      selectedRowIds,\r\n    },\r\n  } = useTable(\r\n    {\r\n      columns,\r\n      data,\r\n      defaultColumn,\r\n      filterTypes,\r\n      // updateMyData isn't part of the API, but\r\n      // anything we put into these options will\r\n      // automatically be available on the instance.\r\n      // That way we can call this function from our\r\n      // cell renderer!\r\n      updateMyData,\r\n      // We also need to pass this so the page doesn't change\r\n      // when we edit the data.\r\n      autoResetPage: !skipReset,\r\n      autoResetSelectedRows: !skipReset,\r\n      disableMultiSort: true,\r\n    },\r\n    useFilters,\r\n    useGroupBy,\r\n    useSortBy,\r\n    useExpanded,\r\n    usePagination,\r\n    useRowSelect,\r\n    // Here we will use a plugin to add our selection column\r\n    // hooks => {\r\n    //   hooks.visibleColumns.push(columns => {\r\n    //     return [\r\n    //       {\r\n    //         id: 'selection',\r\n    //         // Make this column a groupByBoundary. This ensures that groupBy columns\r\n    //         // are placed after it\r\n    //         groupByBoundary: true,\r\n    //         // The header can use the table's getToggleAllRowsSelectedProps method\r\n    //         // to render a checkbox\r\n    //         Header: ({ getToggleAllRowsSelectedProps }) => (\r\n    //           <div>\r\n    //             <IndeterminateCheckbox {...getToggleAllRowsSelectedProps()} />\r\n    //           </div>\r\n    //         ),\r\n    //         // The cell can use the individual row's getToggleRowSelectedProps method\r\n    //         // to the render a checkbox\r\n    //         Cell: ({ row }) => (\r\n    //           <div>\r\n    //             <IndeterminateCheckbox {...row.getToggleRowSelectedProps()} />\r\n    //           </div>\r\n    //         ),\r\n    //       },\r\n    //       ...columns,\r\n    //     ]\r\n    //   })\r\n    // }\r\n  )\r\n\r\n  // Render the UI for your table\r\n  return (\r\n    <>\r\n      <table {...getTableProps()}>\r\n        <thead>\r\n          {headerGroups.map(headerGroup => (\r\n            <tr {...headerGroup.getHeaderGroupProps()}>\r\n              {headerGroup.headers.map(column => (\r\n                <th {...column.getHeaderProps()}>\r\n                  <div>\r\n                    <span {...column.getSortByToggleProps()}>\r\n                      {column.render('Header')}\r\n                      {/* Add a sort direction indicator */}\r\n                      {column.isSorted\r\n                        ? column.isSortedDesc\r\n                          ? ' 🔽'\r\n                          : ' 🔼'\r\n                        : ''}\r\n                    </span>\r\n                  </div>\r\n                  {/* Render the columns filter UI */}\r\n                  <div>{column.canFilter ? column.render('Filter') : null}</div>\r\n                </th>\r\n              ))}\r\n            </tr>\r\n          ))}\r\n        </thead>\r\n        <tbody {...getTableBodyProps()}>\r\n          {page.map(row => {\r\n            prepareRow(row)\r\n            return (\r\n              <tr {...row.getRowProps()}>\r\n                {row.cells.map(cell => {\r\n                  return (\r\n                    <td {...cell.getCellProps()}>\r\n                      {cell.isGrouped ? (\r\n                        // If it's a grouped cell, add an expander and row count\r\n                        <>\r\n                          <span {...row.getToggleRowExpandedProps()}>\r\n                            {row.isExpanded ? '👇' : '👉'}\r\n                          </span>{' '}\r\n                          {cell.render('Cell', { editable: false })} (\r\n                          {row.subRows.length})\r\n                        </>\r\n                      ) : cell.isAggregated ? (\r\n                        // If the cell is aggregated, use the Aggregated\r\n                        // renderer for cell\r\n                        cell.render('Aggregated')\r\n                      ) : cell.isPlaceholder ? null : ( // For cells with repeated values, render null\r\n                        // Otherwise, just render the regular cell\r\n                        cell.render('Cell', { editable: false })\r\n                      )}\r\n                    </td>\r\n                  )\r\n                })}\r\n              </tr>\r\n            )\r\n          })}\r\n        </tbody>\r\n      </table>\r\n      {/*\r\n        Pagination can be built however you'd like.\r\n        This is just a very basic UI implementation:\r\n      */}\r\n      <div className=\"pagination\">\r\n        <button onClick={() => gotoPage(0)} disabled={!canPreviousPage}>\r\n          {'<<'}\r\n        </button>{' '}\r\n        <button onClick={() => previousPage()} disabled={!canPreviousPage}>\r\n          {'<'}\r\n        </button>{' '}\r\n        <button onClick={() => nextPage()} disabled={!canNextPage}>\r\n          {'>'}\r\n        </button>{' '}\r\n        <button onClick={() => gotoPage(pageCount - 1)} disabled={!canNextPage}>\r\n          {'>>'}\r\n        </button>{' '}\r\n        <span>\r\n          Page{' '}\r\n          <strong>\r\n            {pageIndex + 1} of {pageOptions.length}\r\n          </strong>{' '}\r\n        </span>\r\n        <span>\r\n          | Go to page:{' '}\r\n          <input\r\n            type=\"number\"\r\n            defaultValue={pageIndex + 1}\r\n            onChange={e => {\r\n              const page = e.target.value ? Number(e.target.value) - 1 : 0\r\n              gotoPage(page)\r\n            }}\r\n            style={{ width: '100px' }}\r\n          />\r\n        </span>{' '}\r\n        <select\r\n          value={pageSize}\r\n          onChange={e => {\r\n            setPageSize(Number(e.target.value))\r\n          }}\r\n        >\r\n          {[10, 20, 30, 40, 50].map(pageSize => (\r\n            <option key={pageSize} value={pageSize}>\r\n              Show {pageSize}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      </div>\r\n      <pre>\r\n        <code>\r\n          {JSON.stringify(\r\n            {\r\n              pageIndex,\r\n              pageSize,\r\n              pageCount,\r\n              canNextPage,\r\n              canPreviousPage,\r\n              sortBy,\r\n              groupBy,\r\n              expanded: expanded,\r\n              filters,\r\n              selectedRowIds: selectedRowIds,\r\n            },\r\n            null,\r\n            2\r\n          )}\r\n        </code>\r\n      </pre> \r\n    </>\r\n  )\r\n}\r\n\r\n// Define a custom filter filter function!\r\nfunction filterGreaterThan(rows, id, filterValue) {\r\n  return rows.filter(row => {\r\n    const rowValue = row.values[id]\r\n    return rowValue >= filterValue\r\n  })\r\n}\r\n\r\n// This is an autoRemove method on the filter function that\r\n// when given the new filter value and returns true, the filter\r\n// will be automatically removed. Normally this is just an undefined\r\n// check, but here, we want to remove the filter if it's not a number\r\nfilterGreaterThan.autoRemove = val => typeof val !== 'number'\r\n\r\n// This is a custom aggregator that\r\n// takes in an array of leaf values and\r\n// returns the rounded median\r\nfunction roundedMedian(leafValues) {\r\n  let min = leafValues[0] || 0\r\n  let max = leafValues[0] || 0\r\n\r\n  leafValues.forEach(value => {\r\n    min = Math.min(min, value)\r\n    max = Math.max(max, value)\r\n  })\r\n\r\n  return Math.round((min + max) / 2)\r\n}\r\n\r\n// const IndeterminateCheckbox = React.forwardRef(\r\n//   ({ indeterminate, ...rest }, ref) => {\r\n//     const defaultRef = React.useRef()\r\n//     const resolvedRef = ref || defaultRef\r\n\r\n//     React.useEffect(() => {\r\n//       resolvedRef.current.indeterminate = indeterminate\r\n//     }, [resolvedRef, indeterminate])\r\n\r\n//     return (\r\n//       <>\r\n//         <input type=\"checkbox\" ref={resolvedRef} {...rest} />\r\n//       </>\r\n//     )\r\n//   }\r\n// )\r\n\r\nexport default function ReactTable() {\r\n  const columns = React.useMemo(\r\n    () => [\r\n      {\r\n        Header: 'Identity',\r\n        columns: [\r\n          {\r\n            Header: 'EID',\r\n            accessor: 'eid',\r\n            filter: \"\",\r\n          },\r\n          {\r\n            Header: 'Name',\r\n            accessor: 'Employee_Name',\r\n            // Use our custom `fuzzyText` filter on this column\r\n            filter: 'fuzzyText',\r\n            // Use another two-stage aggregator here to\r\n            // first count the UNIQUE values from the rows\r\n            // being aggregated, then sum those counts if\r\n            // they are aggregated further\r\n            aggregate: 'uniqueCount',\r\n            Aggregated: ({ value }) => `${value} Unique Names`,\r\n          },\r\n        ],\r\n      },\r\n      {\r\n        Header: 'Info',\r\n        columns: [\r\n          {\r\n            Header: 'Title',\r\n            accessor: 'Class_Title',\r\n          },\r\n          {\r\n            Header: 'Wages',\r\n            accessor: 'Wages',\r\n            Filter: NumberRangeColumnFilter,\r\n            filter: 'between',\r\n            // Aggregate the sum of all visits\r\n            aggregate: 'sum',\r\n            Aggregated: ({ value }) => `${value} (total)`,\r\n          },\r\n          {\r\n            Header: 'Benefits',\r\n            accessor: 'Benefits',\r\n            Filter: NumberRangeColumnFilter,\r\n            filter: 'between',\r\n            // Aggregate the sum of all visits\r\n            aggregate: 'sum',\r\n            Aggregated: ({ value }) => `${value} (total)`,\r\n          },\r\n          {\r\n            Header: 'Compensation',\r\n            accessor: 'Compensation',\r\n            Filter: SliderColumnFilter,\r\n            filter: filterGreaterThan,\r\n            // Use our custom roundedMedian aggregator\r\n            aggregate: roundedMedian,\r\n            Aggregated: ({ value }) => `${value} (med)`,\r\n          },\r\n        ],\r\n      },\r\n    ], \r\n    []\r\n  )\r\n\r\n  const [data, setData] = React.useState(Employees)\r\n  const [originalData] = React.useState(data)\r\n\r\n  // We need to keep the table from resetting the pageIndex when we\r\n  // Update data. So we can keep track of that flag with a ref.\r\n  const skipResetRef = React.useRef(false)\r\n\r\n  // When our cell renderer calls updateMyData, we'll use\r\n  // the rowIndex, columnId and new value to update the\r\n  // original data\r\n  const updateMyData = (rowIndex, columnId, value) => {\r\n    // We also turn on the flag to not reset the page\r\n    skipResetRef.current = true\r\n    setData(old =>\r\n      old.map((row, index) => {\r\n        if (index === rowIndex) {\r\n          return {\r\n            ...row,\r\n            [columnId]: value,\r\n          }\r\n        }\r\n        return row\r\n      })\r\n    )\r\n  }\r\n\r\n  // After data changes, we turn the flag back off\r\n  // so that if data actually changes when we're not\r\n  // editing it, the page is reset\r\n  React.useEffect(() => {\r\n    skipResetRef.current = false\r\n  }, [data])\r\n\r\n  // Let's add a data resetter/randomizer to help\r\n  // illustrate that flow...\r\n  const resetData = () => {\r\n    // Don't reset the page when we do this\r\n    skipResetRef.current = true\r\n    setData(originalData)\r\n  }\r\n\r\n  return (\r\n    <Styles>\r\n      <button onClick={resetData}>Reset Data</button>\r\n      <Table\r\n        columns={columns}\r\n        data={data}\r\n        updateMyData={updateMyData}\r\n        skipReset={skipResetRef.current}\r\n      />\r\n    </Styles>\r\n  )\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\nimport { lighten, makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport FilterListIcon from '@material-ui/icons/FilterList';\r\nimport Employees from \"../utils/Employee.json\";\r\n\r\n// function createData(name, calories, fat, carbs, protein) {\r\n//   return { name, calories, fat, carbs, protein };\r\n// }\r\n\r\nconst rows = Employees;\r\n\r\nfunction descendingComparator(a, b, orderBy) {\r\n  if (b[orderBy] < a[orderBy]) {\r\n    return -1;\r\n  }\r\n  if (b[orderBy] > a[orderBy]) {\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\n\r\nfunction getComparator(order, orderBy) {\r\n  return order === 'desc'\r\n    ? (a, b) => descendingComparator(a, b, orderBy)\r\n    : (a, b) => -descendingComparator(a, b, orderBy);\r\n}\r\n\r\nfunction stableSort(array, comparator) {\r\n  const stabilizedThis = array.map((el, index) => [el, index]);\r\n  stabilizedThis.sort((a, b) => {\r\n    const order = comparator(a[0], b[0]);\r\n    if (order !== 0) return order;\r\n    return a[1] - b[1];\r\n  });\r\n  return stabilizedThis.map((el) => el[0]);\r\n}\r\n\r\nconst headCells = [\r\n  { id: 'eid', numeric: true, disablePadding: true, label: 'EID', },\r\n  { id: 'Employee_Name', numeric: false, disablePadding: false, label: 'Name' },\r\n  { id: 'Class_Title', numeric: false, disablePadding: false, label: 'Title' },\r\n  { id: 'Wages', numeric: true, disablePadding: false, label: 'Wages(USD)' },\r\n  { id: 'Benefits', numeric: true, disablePadding: false, label: 'Benefits(USD)' },\r\n  { id: 'Compensation', numeric: true, disablePadding: false, label: 'Total Compensation(USD)' },\r\n];\r\n\r\nfunction EnhancedTableHead(props) {\r\n  const { classes, order, orderBy, numSelected, rowCount, onRequestSort } = props;\r\n  const createSortHandler = (property) => (event) => {\r\n    onRequestSort(event, property);\r\n  };\r\n\r\n  return (\r\n    <TableHead>\r\n      <TableRow>\r\n        {headCells.map((headCell) => (\r\n          <TableCell\r\n            key={headCell.id}\r\n            align={headCell.numeric ? 'right' : 'left'}\r\n            padding={headCell.disablePadding ? 'none' : 'default'}\r\n            sortDirection={orderBy === headCell.id ? order : false}\r\n          >\r\n            <TableSortLabel\r\n              active={orderBy === headCell.id}\r\n              direction={orderBy === headCell.id ? order : 'asc'}\r\n              onClick={createSortHandler(headCell.id)}\r\n            >\r\n              {headCell.label}\r\n              {orderBy === headCell.id ? (\r\n                <span className={classes.visuallyHidden}>\r\n                  {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\r\n                </span>\r\n              ) : null}\r\n            </TableSortLabel>\r\n          </TableCell>\r\n        ))}\r\n      </TableRow>\r\n    </TableHead>\r\n  );\r\n}\r\n\r\nEnhancedTableHead.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n  numSelected: PropTypes.number.isRequired,\r\n  onRequestSort: PropTypes.func.isRequired,\r\n  onSelectAllClick: PropTypes.func.isRequired,\r\n  order: PropTypes.oneOf(['asc', 'desc']).isRequired,\r\n  orderBy: PropTypes.string.isRequired,\r\n  rowCount: PropTypes.number.isRequired,\r\n};\r\n\r\nconst useToolbarStyles = makeStyles((theme) => ({\r\n  root: {\r\n    paddingLeft: theme.spacing(2),\r\n    paddingRight: theme.spacing(1),\r\n  },\r\n  highlight:\r\n    theme.palette.type === 'light'\r\n      ? {\r\n          color: theme.palette.secondary.main,\r\n          backgroundColor: lighten(theme.palette.secondary.light, 0.85),\r\n        }\r\n      : {\r\n          color: theme.palette.text.primary,\r\n          backgroundColor: theme.palette.secondary.dark,\r\n        },\r\n  title: {\r\n    flex: '1 1 100%',\r\n  },\r\n}));\r\n\r\n// const EnhancedTableToolbar = (props) => {\r\n//   const classes = useToolbarStyles();\r\n//   const { numSelected } = props;\r\n\r\n//   return (\r\n//     <Toolbar\r\n//       className={clsx(classes.root, {\r\n//         [classes.highlight]: numSelected > 0,\r\n//       })}\r\n//     >\r\n//       {numSelected > 0 ? (\r\n//         <Typography className={classes.title} color=\"inherit\" variant=\"subtitle1\" component=\"div\">\r\n//           {numSelected} selected\r\n//         </Typography>\r\n//       ) : (\r\n//         <Typography className={classes.title} variant=\"h6\" id=\"tableTitle\" component=\"div\">\r\n//           Nutrition\r\n//         </Typography>\r\n//       )}\r\n\r\n//       {numSelected > 0 ? (\r\n//         <Tooltip title=\"Delete\">\r\n//           <IconButton aria-label=\"delete\">\r\n//             <DeleteIcon />\r\n//           </IconButton>\r\n//         </Tooltip>\r\n//       ) : (\r\n//         <Tooltip title=\"Filter list\">\r\n//           <IconButton aria-label=\"filter list\">\r\n//             <FilterListIcon />\r\n//           </IconButton>\r\n//         </Tooltip>\r\n//       )}\r\n//     </Toolbar>\r\n//   );\r\n// };\r\n\r\n// EnhancedTableToolbar.propTypes = {\r\n//   numSelected: PropTypes.number.isRequired,\r\n// };\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n  paper: {\r\n    width: '100%',\r\n    marginBottom: theme.spacing(2),\r\n  },\r\n  table: {\r\n    minWidth: 750,\r\n  },\r\n  visuallyHidden: {\r\n    border: 0,\r\n    clip: 'rect(0 0 0 0)',\r\n    height: 1,\r\n    margin: -1,\r\n    overflow: 'hidden',\r\n    padding: 0,\r\n    position: 'absolute',\r\n    top: 20,\r\n    width: 1,\r\n  },\r\n}));\r\n\r\nexport default function EnhancedTable() {\r\n  const classes = useStyles();\r\n  const [order, setOrder] = React.useState('asc');\r\n  const [orderBy, setOrderBy] = React.useState('Employee_Name');\r\n  const [selected, setSelected] = React.useState([]);\r\n  const [page, setPage] = React.useState(0);\r\n  const [dense, setDense] = React.useState(false);\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\r\n\r\n  const handleRequestSort = (event, property) => {\r\n    const isAsc = orderBy === property && order === 'asc';\r\n    setOrder(isAsc ? 'desc' : 'asc');\r\n    setOrderBy(property);\r\n  };\r\n\r\n  const handleSelectAllClick = (event) => {\r\n    if (event.target.checked) {\r\n      const newSelecteds = rows.map((n) => n.name);\r\n      setSelected(newSelecteds);\r\n      return;\r\n    }\r\n    setSelected([]);\r\n  };\r\n\r\n  const handleClick = (event, name) => {\r\n    const selectedIndex = selected.indexOf(name);\r\n    let newSelected = [];\r\n\r\n    if (selectedIndex === -1) {\r\n      newSelected = newSelected.concat(selected, name);\r\n    } else if (selectedIndex === 0) {\r\n      newSelected = newSelected.concat(selected.slice(1));\r\n    } else if (selectedIndex === selected.length - 1) {\r\n      newSelected = newSelected.concat(selected.slice(0, -1));\r\n    } else if (selectedIndex > 0) {\r\n      newSelected = newSelected.concat(\r\n        selected.slice(0, selectedIndex),\r\n        selected.slice(selectedIndex + 1),\r\n      );\r\n    }\r\n\r\n    setSelected(newSelected);\r\n  };\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n  const handleChangeDense = (event) => {\r\n    setDense(event.target.checked);\r\n  };\r\n\r\n  const isSelected = (name) => selected.indexOf(name) !== -1;\r\n\r\n  const emptyRows = rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage);\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Paper className={classes.paper}>\r\n        <TableContainer>\r\n          <Table\r\n            className={classes.table}\r\n            aria-labelledby=\"tableTitle\"\r\n            size={dense ? 'small' : 'medium'}\r\n            aria-label=\"enhanced table\"\r\n          >\r\n            <EnhancedTableHead\r\n              classes={classes}\r\n              numSelected={selected.length}\r\n              order={order}\r\n              orderBy={orderBy}\r\n              onSelectAllClick={handleSelectAllClick}\r\n              onRequestSort={handleRequestSort}\r\n              rowCount={rows.length}\r\n            />\r\n            <TableBody>\r\n              {stableSort(rows, getComparator(order, orderBy))\r\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                .map((row, index) => {\r\n                  const isItemSelected = isSelected(row.name);\r\n                  const labelId = `enhanced-table-checkbox-${index}`;\r\n\r\n                  return (\r\n                    <TableRow\r\n                      hover\r\n                      role=\"checkbox\"\r\n                      aria-checked={isItemSelected}\r\n                      tabIndex={-1}\r\n                      key={row.name}\r\n                      selected={isItemSelected}\r\n                    >\r\n                      <TableCell component=\"th\" id={labelId} scope=\"row\" padding=\"none\">\r\n                        {row.eid}\r\n                      </TableCell>\r\n                      <TableCell align=\"right\">{row.Employee_Name}</TableCell>\r\n                      <TableCell align=\"right\">{row.Class_Title}</TableCell>\r\n                      <TableCell align=\"right\">{row.Wages}</TableCell>\r\n                      <TableCell align=\"right\">{row.Benefits}</TableCell>\r\n                      <TableCell align=\"right\">{row.Compensation}</TableCell>\r\n                    </TableRow>\r\n                  );\r\n                })}\r\n              {emptyRows > 0 && (\r\n                <TableRow style={{ height: (dense ? 33 : 53) * emptyRows }}>\r\n                  <TableCell colSpan={6} />\r\n                </TableRow>\r\n              )}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n        <TablePagination\r\n          rowsPerPageOptions={[5, 10, 25]}\r\n          component=\"div\"\r\n          count={rows.length}\r\n          rowsPerPage={rowsPerPage}\r\n          page={page}\r\n          onChangePage={handleChangePage}\r\n          onChangeRowsPerPage={handleChangeRowsPerPage}\r\n        />\r\n      </Paper>\r\n      <FormControlLabel\r\n        control={<Switch checked={dense} onChange={handleChangeDense} />}\r\n        label=\"Dense padding\"\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport Navbar from \"./components/Navbar\";\nimport Main from \"./pages/Main\";\nimport ReactTable from \"./pages/ReactTable\";\nimport MaterialUi from \"./pages/MaterialUi\";\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <Router>\n        <div>\n        <Navbar/>\n        <Route exact path=\"/GovOfficeEmployees\" component={Main}/>\n        <Route exact path=\"/react\" component={Main}/>\n        <Route exact path=\"/react-table\" component={ReactTable} />\n        <Route exact path=\"/material-ui\" component={MaterialUi} />\n        </div>\n        </Router>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}